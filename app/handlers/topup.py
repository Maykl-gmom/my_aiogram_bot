from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import time

from app.states.topup import TopUp
from app.keyboards.topup import topup_waiting_kb, topup_admin_review_kb
from app.utils.topup import create_topup, fetch_active_topup_for_user, set_topup_status
from app.config import get_card_number, get_admin_id
from app.utils.telegram import safe_answer
from app.keyboards.main import main_menu_kb

router = Router()
MIN_AMOUNT = 100
MAX_AMOUNT = 8000


# –°—Ç–∞—Ä—Ç —Ç–æ–ø–∞–ø—É
@router.message(Command("topup"))
@router.message(F.text.lower().in_({"–ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", "–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"}))
async def topup_start(message: Message, state: FSMContext):
    await message.answer(
        f"–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} –≥—Ä–Ω."
    )
    await state.set_state(TopUp.enter_amount)


# –í–≤—ñ–¥ —Å—É–º–∏
@router.message(TopUp.enter_amount, F.text)
async def topup_amount(message: Message, state: FSMContext):
    txt = (message.text or "").strip().replace(" ", "")
    if not txt.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º—É —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∞–ø—Ä., 150")
        return
    amount = int(txt)
    if amount < MIN_AMOUNT or amount > MAX_AMOUNT:
        await message.answer(f"–°—É–º–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} –≥—Ä–Ω.")
        return

    t = create_topup(message.from_user.id, amount)  # pending + expires_at
    await state.update_data(topup_id=t.id, topup_amount=amount)

    remain = max(0, t.expires_at - int(time.time()))
    mins, secs = divmod(remain, 60)
    await message.answer(
        f"üßæ –°—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: <b>{amount} –≥—Ä–Ω</b>\n"
        f"–ö–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É: <code>{get_card_number()}</code>\n"
        f"–ß–∞—Å –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: <b>{mins} —Ö–≤ {secs} —Å</b>\n\n"
        f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å <b>–∫–≤–∏—Ç–∞–Ω—Ü—ñ—é</b> (—Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω) —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        reply_markup=topup_waiting_kb(),
    )
    await state.set_state(TopUp.waiting_receipt)


# –ü—ñ–¥–∫–∞–∑–∫–∞, —â–æ —Ä–æ–±–∏—Ç–∏
@router.callback_query(TopUp.waiting_receipt, F.data == "topup:paid_hint")
async def topup_paid_hint(callback: CallbackQuery, state: FSMContext):
    await callback.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏—â–µ.", show_alert=True
    )


# –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–æ–ø–∞–ø
@router.callback_query(F.data == "topup:cancel")
async def topup_cancel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tid = data.get("topup_id")
    if tid:
        set_topup_status(int(tid), "canceled")
    await state.clear()
    await callback.message.edit_text("–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_kb())
    await safe_answer(callback)


# –†–µ–∑—é–º —Ç–æ–ø–∞–ø—É
@router.callback_query(F.data == "topup:resume")
async def topup_resume(callback: CallbackQuery, state: FSMContext):
    t = fetch_active_topup_for_user(callback.from_user.id)
    if not t:
        await callback.answer("–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–ø–æ–≤–Ω–µ–Ω—å –Ω–µ–º–∞—î.", show_alert=True)
        return
    await state.set_state(TopUp.waiting_receipt)
    await state.update_data(topup_id=t.id, topup_amount=t.amount)
    remain = max(0, t.expires_at - int(time.time()))
    mins, secs = divmod(remain, 60)
    await callback.message.edit_text(
        f"üßæ –ê–∫—Ç–∏–≤–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: <b>{t.amount} –≥—Ä–Ω</b>\n"
        f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É: <b>{mins} —Ö–≤ {secs} —Å</b>\n"
        f"–ö–∞—Ä—Ç—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –¥–∏–≤–∏—Å—å —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.",
        reply_markup=topup_waiting_kb(),
    )
    await safe_answer(callback)


# –ü—Ä–∏–π–æ–º –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: —Ñ–æ—Ç–æ —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç
@router.message(TopUp.waiting_receipt, F.photo | F.document)
async def topup_receipt(message: Message, state: FSMContext):
    data = await state.get_data()
    tid = data.get("topup_id")
    amount = data.get("topup_amount")
    if not tid or not amount:
        await message.answer("–ü–æ—á–Ω—ñ—Ç—å —ñ–∑ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏: /topup")
        await state.set_state(TopUp.enter_amount)
        return

    admin_id = get_admin_id()
    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —á–µ–∫ –∞–¥–º—ñ–Ω—É —ñ –¥–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–ø—Ä—É–≤–∞/—Ä–µ–¥–∂–µ–∫—Ç–∞
    try:
        await message.forward(admin_id)
        await message.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üßæ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {message.from_user.full_name} (id={message.from_user.id})\n"
                f"–°—É–º–∞: {amount} –≥—Ä–Ω\n"
                f"TopUp ID: {tid}"
            ),
            reply_markup=topup_admin_review_kb(int(tid), int(message.from_user.id), int(amount)),
        )
    except Exception:
        pass

    await message.answer("–ö–≤–∏—Ç–∞–Ω—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(TopUp.awaiting_admin)
