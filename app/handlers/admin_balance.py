from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from app.utils.balance import add_balance, set_balance, get_balance

try:
    from app.config import ADMIN_ID
except Exception:
    import os

    ADMIN_ID = int(os.getenv("ADMIN_ID", "123456"))

router = Router()


def _is_admin(message: Message) -> bool:
    return str(message.from_user.id) == str(ADMIN_ID)


@router.message(Command("balance"))
async def cmd_balance(message: Message):
    bal = get_balance(message.from_user.id)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal}</b>")


@router.message(Command("addbal"))
async def cmd_addbal(message: Message):
    if not _is_admin(message):
        return await message.answer("–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É.")
    parts = message.text.split()
    if len(parts) != 3:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /addbal <user_id> <—Å—É–º–∞>")
    try:
        uid = int(parts[1])
        delta = int(parts[2])
    except ValueError:
        return await message.answer("user_id —ñ —Å—É–º–∞ –º–∞—é—Ç—å –±—É—Ç–∏ —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏.")
    new_bal = add_balance(uid, delta)
    await message.answer(f"‚úÖ User {uid}: –±–∞–ª–∞–Ω—Å {new_bal} (–∑–º—ñ–Ω–∞ {delta:+d}).")


@router.message(Command("setbal"))
async def cmd_setbal(message: Message):
    if not _is_admin(message):
        return await message.answer("–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É.")
    parts = message.text.split()
    if len(parts) != 3:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /setbal <user_id> <—Å—É–º–∞>")
    try:
        uid = int(parts[1])
        amount = int(parts[2])
    except ValueError:
        return await message.answer("user_id —ñ —Å—É–º–∞ –º–∞—é—Ç—å –±—É—Ç–∏ —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏.")
    new_bal = set_balance(uid, amount)
    await message.answer(f"‚úÖ User {uid}: –±–∞–ª–∞–Ω—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {new_bal}.")


@router.message(Command("give"))
async def cmd_give_reply(message: Message):
    """–ó—Ä—É—á–Ω–æ –≤ –≥—Ä—É–ø—ñ: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —ñ –ø–∏—à–µ—à /give 150"""
    if not _is_admin(message):
        return await message.answer("–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É.")
    if not message.reply_to_message:
        return await message.answer("–ó—Ä–æ–±–∏ –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("–§–æ—Ä–º–∞—Ç: —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ /give <—Å—É–º–∞>")
    try:
        delta = int(parts[1])
    except ValueError:
        return await message.answer("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")
    uid = message.reply_to_message.from_user.id
    new_bal = add_balance(uid, delta)
    await message.answer(f"‚úÖ User {uid}: –±–∞–ª–∞–Ω—Å {new_bal} (–∑–º—ñ–Ω–∞ {delta:+d}).")
